; state 0 # line 9	write 0

0 _ _ * 1
0 1 _ * 1

; state 1 # line 10	right

1 _ * r 2
1 1 * r 2

; state 2 # line 11	if(0) goto End  // counter consumed

2 1 * * 3
2 _ * * 27

; state 3 # line 13	while(1) right

3 1 * r 3
3 _ * * 4

; state 4 # line 14	while(0) right  // reaches q's left

4 _ * r 4
4 1 * * 5

; state 5 # line 19	right

5 _ * r 6
5 1 * r 6

; state 6 # line 20	if(0) goto Leapfrog_last

6 1 * * 7
6 _ * * 19

; state 7 # line 21	left

7 _ * l 8
7 1 * l 8

; state 8 # line 22	write 0

8 _ _ * 9
8 1 _ * 9

; state 9 # line 23	right

9 _ * r 10
9 1 * r 10

; state 10 # line 24	while(1) right  // at separating blank

10 1 * r 10
10 _ * * 11

; state 11 # line 25	right

11 _ * r 12
11 1 * r 12

; state 12 # line 26	while(1) right

12 1 * r 12
12 _ * * 13

; state 13 # line 27	write 1     // moved

13 _ 1 * 14
13 1 1 * 14

; state 14 # line 30	while(1) left

14 1 * l 14
14 _ * * 15

; state 15 # line 31	left

15 _ * l 16
15 1 * l 16

; state 16 # line 32	while(1) left

16 1 * l 16
16 _ * * 17

; state 17 # line 33	right

17 _ * r 18
17 1 * r 18

; state 18 # line 34	goto Leapfrog

18 _ * * 5
18 1 * * 5

; state 19 # line 38	write 1 // write separating blank

19 _ 1 * 20
19 1 1 * 20

; state 20 # line 39	left

20 _ * l 21
20 1 * l 21

; state 21 # line 40	write 0

21 _ _ * 22
21 1 _ * 22

; state 22 # line 41	goto Leapfrog_end

22 _ * * 23
22 1 * * 23

; state 23 # line 44	while(0) left

23 _ * l 23
23 1 * * 24

; state 24 # line 45	while(1) left

24 1 * l 24
24 _ * * 25

; state 25 # line 46	right   // back to counter's left

25 _ * r 26
25 1 * r 26

; state 26 # line 47	goto Counter_check

26 _ * * 0
26 1 * * 0

; state 27 # line 51	right

27 _ * r 28
27 1 * r 28

; state 28 # line 53	    if(1) halt

28 _ * * 29

; state 29 # line 54	    write 1

29 _ 1 * 30
29 1 1 * 30

; state 30 # line 55	    right

30 _ * r 31
30 1 * r 31

; state 31 # line 56	    goto Fill
31 _ * * 28
31 1 * * 28

